Public class Node
{
	Course payload
	
    Node* leftConnector;
	
    Node* rightConnector;
	
    Public Node ()
    {
	    Payload = new Course()
	    leftConnecotr = null;
	    rightConnector = null;
    }

    Public Node(Course _payload)
    {
	    Payload = _payload;
	    leftConnecotr = null;
	    rightConnector = null;

    }
}

//The root of the tree should be declared as a static object.  This will be our data store.
Static Node* root = null;

Public class Course
{
	Course()

	Course(vector<string> tokens)
	{
		CourseNumber = tokens[0];
		CourseDescription = tokens[1];
		For(var I = 2; I < tokens.length;i++)
			CoursePrerequisites.Add(tokens[i]);
	}

	String CourseNumber 
	
    String CourseDescription
	
    Vector<string> CoursePrerequisites
	
    Print()
	{	
		Cout << CourseNumber << “, “ << CourseDescription;
		Foreach(var token in tokens)
			Cout << “, “ << token;
		Cout << endl;
	}	
}

OpenDataFile()
{
	Var fileLInes = new Vector<string>()
    
    Ask the user to specify the data file’s location.
	
    Open the file
	
    While you are not at the end of the file
    {
		Var line = File.ReadLine;
		fileLines.Append(line);
    }

	Execute ParseDataFile(fileLines).
}

ParseDataFile(Vector<string> fileLInes)
{
	Var parsedLines = new HashTable();

	Var validatedCourses = new Vector<Courses>();

    Foreach(var line in fileLines)
	{
		Var tokens = Split the string by commas
		If(tokens.count >= 2)
			parsedLines.Add(tokens[0], tokens);
	}
	
	Foreach(var line in parsedLines)
	{
		If the line has 2 tokens
		{
			validatedCourses.Add(new Course(line.tokens));
		}
		Else
		{
			Foreach preRequisiteToken (any token after the first two)
			{
				If(prerequisiteToken exists in parsedLines)
				{
					validatedCourses.Add(new Course(line.tokens));							
                }
			}
		}
	}

	Foreach(var course in validatedCourses)
	{
		If(root == null)
		{
			Root = new Node(course);			
		}
		Else
		{
			AddNode(root, course);
		}
	}
} 
	
//need to create some place holder variables for the recursive addition.
leftConnecotr = null;
rightConnector = null;

AddNode(Node* root, Course payload)
{
	If(payload. CourseNumber < payload.CourseNumber)
	{
		If(root. leftConnecotr == null)
            Root. leftConnecotr = new Node(course);
		Else
			AddNode(Root. leftConnecotr,course);
	}
	Else
	{	
		If(root. rightConnector == null)
            Root rightConnector = new Node(course);
		Else
			AddNode(Root. rightConnector,course);

	}
}


PrintCourse(string course)
{
	SearchToPrint(Root,course);
}

SearchToPrint(Node* node, string course)
{
	If(node == null)
		Return;
	
	SearchToPrint (node. leftConnecotr,course);

	if(node.Course. CourseNumber == course)
	{
		node.Course.Print();	
		return;	
    }

	SearchToPrint (node. rightConnector,course);
}

PrintAllCourses()
{
	PrintAllRecursive(root)
}

PrintAllRecursive(Node* node)
{
    If(node == null)
		Return;
	
	PrintAllRecursive (node. leftConnecotr,course);

	node.Course.Print();		

	PrintAllRecursive (node. rightConnector,course);
}

//Entry Point and work loop
DoWork()
{
	While(true)
    {
		Display user menu options:
		1:  Load Data
		2:  Print Course List
		3:  Print course
		4: Exit

		Var userInput = Get user input.
		Switch(userInput)
		Case 1: OpenDataFile(); break;
		Case 2: PrintAllCourses(); break;
		Case 3: 
			Var userCourse = Prompt user for course.
            PrintCourse(userCourse);
            break
		Case 4: return; //Exits program
	}
}


